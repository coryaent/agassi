"use strict";

const log = require ('../logger.js');

const Discover = require ('node-discover');
const EventEmitter = require ('events');
const http = require ('http');
const iprange = require ('iprange');
const querystring = require ('querystring');
const rr = require ('rr');

const Cache = require ('../cache.js');
const Certificate = require ('../certificate.js');
const Config = require('../config.js');

// default options (TCP/UDP)
const port = 1986;


// callback on discover creation
async function initialize (error) {

    if (error) { 
        process.exitCode = 1;
        throw error;
    }

    // log.debug ('Looking for peers...');
    const retries = 3; let attempt = 1;
    while ((Peers.size < 1) && (attempt <= retries)) {
        log.debug (`Looking for peers. Attempt (${attempt}/${retries})...`);
        // backoff
        await sleep ( attempt * 30 * 1000);
        if (Peers.size < 1) {
            attempt++;
        }
    }

    if (Peers.size == 0) { 
        log.warn ('Could not find any peers.'); 
    }

    // indicates completion status and joinHost
    // if this cluster node is master, "const joinAddress"
    // will be undefined here
    const joinAddress = isMaster ? undefined : Array.from (Peers.values ());
    discovery.emit ('complete', options.address, joinAddress);
};

const discovery = new EventEmitter ()
.once ('complete', async function spawnRqlited (listenAddress, joinAddress) {
    rqlited.spawn (listenAddress, joinAddress, false);
});

const RemovalTimeouts = new Map ();

async function removeNode (nodeID) {
    // if this node is master, remove the lost node
    if (RemovalTimeouts.has (nodeID)) {
        log.debug (`Removing node ${nodeID}...`);
        await rqlite.removeNode (nodeID);
        RemovalTimeouts.delete (nodeID);
    }
}

const ChallengeResponses = new EventEmitter ();

var discover = null;

module.exports = {
    
    start: (address, subnet, standalone) => {
        // start rqlited in standalone mode
        if (standalone === true) {
            log.debug ('Starting rqlited in standalone mode...');
            rqlited.spawn (address, null, standalone);
            return;
        }
        // start automatic discovery
        log.debug (`Starting automatic discovery with address ${address}...`);
        options.address = address;
        options.unicast = iprange (subnet);

    },

    ChallengeResponses,

    indicateChallengeResponse: (token, order) => {
        if (!Config.standalone) {
            if (discover && discover instanceof Discover) {
                discover.send ('challenge.responses', {token, order});
            } else {
                log.warn ('Cluster discovery has not been initialized.');
            }
        } else {
            ChallengeResponses.emit (token, order);
        }
    },

    advertise: (advertisement) => {
        if (discover && discover instanceof Discover) {
            discover.advertise (advertisement);
            log.debug (`Set cluster discover advertisement to ${advertisement}.`);
        }
    },

    isMaster: () => {
        return isMaster;
    },

    stop: () => {
        if (discover && discover instanceof Discover) {
            log.info ('Stopping cluster auto-discovery...');
            discover.stop ();
        }
        rqlited.kill ();
    }
}